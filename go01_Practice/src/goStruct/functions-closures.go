package main

import "fmt"

/**
函数的闭包
在Go语言中，闭包是一种函数的概念，它可以引用其周围的变量，并将其保存在函数内。这意味着闭包可以捕获和使用在其外部定义的变量，无论该变量是否仍处于范围内。
当一个函数定义了一个闭包时，它会创建一个包含该函数及其周围环境中的变量的封闭环境。这个封闭环境使得闭包函数能够访问和操作该函数外部的变量，即使在函数调用之后这些变量已经失效或超出了其范围。
闭包的一个重要特性是它可以保持对其周围环境中变量的引用，即使这些变量在闭包函数的外部范围中已经被销毁或修改。这使得闭包函数能够在后续调用中继续访问和使用封闭环境中的变量。
理解闭包的关键是意识到闭包函数不仅仅是函数本身，它还包括与其相关的信息和环境。这种特性使得闭包函数能够保存并在需要时访问封闭环境中的变量。

*/


func adder() func(int) int {    //这里函数 adder返回一个闭包函数 func(int)int， 这个闭包函数func牛逼就牛逼在【作为返回值】他【还可以引用外部变量】，巨牛逼
	sum := 0
	return func(x int) int {   //注意看，这里作为返回值，他娘的还可以引用外部变量，巨牛逼了
		sum += x
		return sum  //从 0 开始自增
	}
}

func main() {
	pos, neg := adder(), adder()
	for i := 0; i < 10; i++ {
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	}
}
